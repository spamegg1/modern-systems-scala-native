object FileInputPipeExample:
  import LibUV.*, LibUVConstants.*

  def main(args: String*): Unit =
    val p = FilePipe(c"./data.txt")
    .map(d =>
      println(s"consumed $d")
      d
    ).map(d =>
      val parsed = Try(d.toInt)
      println(s"parsed: $parsed")
      parsed
    )
    .addDestination(FileOutputPipe(c"./output.txt", false))
    uv_run(EventLoop.loop, UV_RUN_DEFAULT)
    println("done")

object FileOutputPipeExample:
  import LibUV.*, LibUVConstants.*

  def main(args: String*): Unit =
    println("hello!")
    val p = SyncPipe(0)
    val p = FilePipe(c"./data.txt")

    val q = p.map(d =>
      println(s"consumed $d")
      d
    ).map(d =>
      val parsed = Try(d.toInt)
      println(s"parsed: $parsed")
      parsed.toString
    )
    .addDestination(FileOutputPipe(c"./output.txt", false))
    uv_run(EventLoop.loop, UV_RUN_DEFAULT)
    println("done")

def filter[T](f: T => Boolean): Pipe[T] =
  addDestination(mapOption(t =>
    f(t) match
      case true => Some(t)
      case false => None
  ))


val p: Pipe[String,String] = ???
var counter = 0
p.map(i =>
  counter += 1
  i
)
// ...
uv_run(EventLoop.loop,UV_RUN_DEFAULT)
println(s"saw $counter elements")

val p: Pipe[String] = ???
val c = p.addDestination(Counter())
uv_run(EventLoop.loop,UV_RUN_DEFAULT)
println(s"saw ${c.counter} elements")

val p: Pipe[String] = ???
p.mapConcat(content =>
  content.split("\n")
).mapConcat(line =>
  line.split(" ")
).map(word =>
  println(s"saw word: ${word}")
)

uv_run(EventLoop.loop,UV_RUN_DEFAULT)
println(s"saw ${c.counter} elements")

SyncPipe(0)
.map(d =>
  println(s"consumed $d")
  d
).map(d =>
  val parsed = Try {
    d.toInt
  }
).filter {
  case Success(i) =>
    println(s"saw number $i")
    true
  case Failure(f) =>
    println(s"error: $f")
    false
}
// ...

val p: Pipe[String] = ???
p.mapAsync(url =>
  Curl.get(url)
).map(response =>
  println(s"got back result: $response")
)
